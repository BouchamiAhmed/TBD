/**
 * @fileoverview gRPC-Web generated client stub for admin.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.30.2
// source: admin.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.admin = {};
proto.admin.v1 = require('./admin_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.v1.AdminServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.v1.AdminServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.LoginRequest,
 *   !proto.admin.v1.LoginResponse>}
 */
const methodDescriptor_AdminService_Login = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/Login',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.LoginRequest,
  proto.admin.v1.LoginResponse,
  /**
   * @param {!proto.admin.v1.LoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/Login',
      request,
      metadata || {},
      methodDescriptor_AdminService_Login,
      callback);
};


/**
 * @param {!proto.admin.v1.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/Login',
      request,
      metadata || {},
      methodDescriptor_AdminService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.RegisterRequest,
 *   !proto.admin.v1.RegisterResponse>}
 */
const methodDescriptor_AdminService_Register = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/Register',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.RegisterRequest,
  proto.admin.v1.RegisterResponse,
  /**
   * @param {!proto.admin.v1.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.RegisterResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/Register',
      request,
      metadata || {},
      methodDescriptor_AdminService_Register,
      callback);
};


/**
 * @param {!proto.admin.v1.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/Register',
      request,
      metadata || {},
      methodDescriptor_AdminService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.CreateDatabaseRequest,
 *   !proto.admin.v1.CreateDatabaseResponse>}
 */
const methodDescriptor_AdminService_CreateDatabase = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/CreateDatabase',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.CreateDatabaseRequest,
  proto.admin.v1.CreateDatabaseResponse,
  /**
   * @param {!proto.admin.v1.CreateDatabaseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.CreateDatabaseResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.CreateDatabaseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.CreateDatabaseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.CreateDatabaseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.createDatabase =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/CreateDatabase',
      request,
      metadata || {},
      methodDescriptor_AdminService_CreateDatabase,
      callback);
};


/**
 * @param {!proto.admin.v1.CreateDatabaseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.CreateDatabaseResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.createDatabase =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/CreateDatabase',
      request,
      metadata || {},
      methodDescriptor_AdminService_CreateDatabase);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.GetUserDatabasesRequest,
 *   !proto.admin.v1.GetUserDatabasesResponse>}
 */
const methodDescriptor_AdminService_GetUserDatabases = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/GetUserDatabases',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.GetUserDatabasesRequest,
  proto.admin.v1.GetUserDatabasesResponse,
  /**
   * @param {!proto.admin.v1.GetUserDatabasesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.GetUserDatabasesResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.GetUserDatabasesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.GetUserDatabasesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.GetUserDatabasesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.getUserDatabases =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/GetUserDatabases',
      request,
      metadata || {},
      methodDescriptor_AdminService_GetUserDatabases,
      callback);
};


/**
 * @param {!proto.admin.v1.GetUserDatabasesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.GetUserDatabasesResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.getUserDatabases =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/GetUserDatabases',
      request,
      metadata || {},
      methodDescriptor_AdminService_GetUserDatabases);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.DeleteDatabaseRequest,
 *   !proto.admin.v1.DeleteDatabaseResponse>}
 */
const methodDescriptor_AdminService_DeleteDatabase = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/DeleteDatabase',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.DeleteDatabaseRequest,
  proto.admin.v1.DeleteDatabaseResponse,
  /**
   * @param {!proto.admin.v1.DeleteDatabaseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.DeleteDatabaseResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.DeleteDatabaseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.DeleteDatabaseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.DeleteDatabaseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.deleteDatabase =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/DeleteDatabase',
      request,
      metadata || {},
      methodDescriptor_AdminService_DeleteDatabase,
      callback);
};


/**
 * @param {!proto.admin.v1.DeleteDatabaseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.DeleteDatabaseResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.deleteDatabase =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/DeleteDatabase',
      request,
      metadata || {},
      methodDescriptor_AdminService_DeleteDatabase);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.v1.GetAllNamespacesRequest,
 *   !proto.admin.v1.GetAllNamespacesResponse>}
 */
const methodDescriptor_AdminService_GetAllNamespaces = new grpc.web.MethodDescriptor(
  '/admin.v1.AdminService/GetAllNamespaces',
  grpc.web.MethodType.UNARY,
  proto.admin.v1.GetAllNamespacesRequest,
  proto.admin.v1.GetAllNamespacesResponse,
  /**
   * @param {!proto.admin.v1.GetAllNamespacesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.admin.v1.GetAllNamespacesResponse.deserializeBinary
);


/**
 * @param {!proto.admin.v1.GetAllNamespacesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.v1.GetAllNamespacesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.v1.GetAllNamespacesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.v1.AdminServiceClient.prototype.getAllNamespaces =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/admin.v1.AdminService/GetAllNamespaces',
      request,
      metadata || {},
      methodDescriptor_AdminService_GetAllNamespaces,
      callback);
};


/**
 * @param {!proto.admin.v1.GetAllNamespacesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.v1.GetAllNamespacesResponse>}
 *     Promise that resolves to the response
 */
proto.admin.v1.AdminServicePromiseClient.prototype.getAllNamespaces =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/admin.v1.AdminService/GetAllNamespaces',
      request,
      metadata || {},
      methodDescriptor_AdminService_GetAllNamespaces);
};


module.exports = proto.admin.v1;

